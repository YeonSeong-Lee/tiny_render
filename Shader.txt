#ifndef __SHADER_HPP__
#define __SHADER_HPP__

#include "geometry.h"
#include "ft_gl.hpp"
#include "Model.hpp"
#include "tgaimage.hpp"

// TODO: refactor this for taking model as a parameter
struct Shader : public IShader {
  mat<3, 3, float> varying_tri;
  mat<2, 3, float> varying_uv;

  virtual ~Shader() {}

  virtual Vec3i vertex(int iface, int nthvert) {
    Vec4f gl_Vertex = embed<4>(model->vert(iface, nthvert));
    gl_Vertex = Projection * ModelView * gl_Vertex;
    varying_tri.set_col(nthvert, proj<3>(gl_Vertex / gl_Vertex[3]));

    varying_uv.set_col(nthvert, model->uv(iface, nthvert));

    gl_Vertex = Viewport * gl_Vertex;
    return proj<3>(gl_Vertex / gl_Vertex[3]);
  }

  virtual bool fragment(Vec3f bar, TGAColor &color) {
    Vec2i uv = varying_uv * bar;
    Vec3f n = model->normal(uv);
    Vec3f reflected_light = n * (n * light_dir * 2.f) - light_dir;
    float diffuse_ity = std::max(n * light_dir, 0.f);
    // float ambient_ity = .1f;
    float specular_ity =
        pow(std::max(reflected_light.z / reflected_light.norm(), 0.0f),
            model->specular(uv));

    float ity = CLAMP(.1f + n * light_dir, 0.f, 1.f);
    TGAColor diff = model->diffuse(uv) * ity;
    for (int c = 0; c < 3; c++)
      color[c] =
          std::min(5 + diff[c] * (diffuse_ity + .6f * specular_ity), 255.f);

    return false;
  }
};

struct GouraudShader : public IShader {
  mat<3, 3, float> varying_tri;
  Vec3f varying_ity;

  virtual ~GouraudShader() {}

  virtual Vec3i vertex(int iface, int nthvert) {
    Vec4f gl_Vertex = embed<4>(model->vert(iface, nthvert));
    gl_Vertex = Projection * ModelView * gl_Vertex;
    varying_tri.set_col(nthvert, proj<3>(gl_Vertex / gl_Vertex[3]));

    varying_ity[nthvert] =
        CLAMP(model->normal(iface, nthvert) * light_dir, 0.f, 1.f);

    gl_Vertex = Viewport * gl_Vertex;
    return proj<3>(gl_Vertex / gl_Vertex[3]);
  }

  virtual bool fragment(Vec3f bar, TGAColor &color) {
    float intensity = varying_ity * bar;
    color = TGAColor(255, 255, 255) * intensity;
    return false;
  }
};

struct ToonShader : public IShader {
  mat<3, 3, float> varying_tri;
  Vec3f varying_ity;

  virtual ~ToonShader() {}

  virtual Vec3i vertex(int iface, int nthvert) {
    Vec4f gl_Vertex = embed<4>(model->vert(iface, nthvert));
    gl_Vertex = Projection * ModelView * gl_Vertex;
    varying_tri.set_col(nthvert, proj<3>(gl_Vertex / gl_Vertex[3]));

    varying_ity[nthvert] =
        CLAMP(model->normal(iface, nthvert) * light_dir, 0.f, 1.f);

    gl_Vertex = Viewport * gl_Vertex;
    return proj<3>(gl_Vertex / gl_Vertex[3]);
  }

  virtual bool fragment(Vec3f bar, TGAColor &color) {
    float intensity = varying_ity * bar;
    if (intensity > .85)
      intensity = 1;
    else if (intensity > .60)
      intensity = .80;
    else if (intensity > .45)
      intensity = .60;
    else if (intensity > .30)
      intensity = .45;
    else if (intensity > .15)
      intensity = .30;
    color = TGAColor(255, 155, 0) * intensity;
    return false;
  }
};

#endif // __SHADER_HPP__